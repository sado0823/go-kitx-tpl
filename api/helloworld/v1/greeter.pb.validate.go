// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: greeter.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HelloRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloRequestMultiError, or
// nil if none found.
func (m *HelloRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return HelloRequestMultiError(errors)
	}

	return nil
}

// HelloRequestMultiError is an error wrapping multiple validation errors
// returned by HelloRequest.ValidateAll() if the designated constraints aren't met.
type HelloRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloRequestMultiError) AllErrors() []error { return m }

// HelloRequestValidationError is the validation error returned by
// HelloRequest.Validate if the designated constraints aren't met.
type HelloRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloRequestValidationError) ErrorName() string { return "HelloRequestValidationError" }

// Error satisfies the builtin error interface
func (e HelloRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloRequestValidationError{}

// Validate checks the field values on HelloReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelloReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelloReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelloReplyMultiError, or
// nil if none found.
func (m *HelloReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HelloReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return HelloReplyMultiError(errors)
	}

	return nil
}

// HelloReplyMultiError is an error wrapping multiple validation errors
// returned by HelloReply.ValidateAll() if the designated constraints aren't met.
type HelloReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelloReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelloReplyMultiError) AllErrors() []error { return m }

// HelloReplyValidationError is the validation error returned by
// HelloReply.Validate if the designated constraints aren't met.
type HelloReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelloReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelloReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelloReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelloReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelloReplyValidationError) ErrorName() string { return "HelloReplyValidationError" }

// Error satisfies the builtin error interface
func (e HelloReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelloReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelloReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelloReplyValidationError{}

// Validate checks the field values on AddBookRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBookRequestMultiError,
// or nil if none found.
func (m *AddBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Price

	if len(errors) > 0 {
		return AddBookRequestMultiError(errors)
	}

	return nil
}

// AddBookRequestMultiError is an error wrapping multiple validation errors
// returned by AddBookRequest.ValidateAll() if the designated constraints
// aren't met.
type AddBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookRequestMultiError) AllErrors() []error { return m }

// AddBookRequestValidationError is the validation error returned by
// AddBookRequest.Validate if the designated constraints aren't met.
type AddBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookRequestValidationError) ErrorName() string { return "AddBookRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookRequestValidationError{}

// Validate checks the field values on AddBookReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddBookReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBookReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddBookReplyMultiError, or
// nil if none found.
func (m *AddBookReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBookReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Price

	if len(errors) > 0 {
		return AddBookReplyMultiError(errors)
	}

	return nil
}

// AddBookReplyMultiError is an error wrapping multiple validation errors
// returned by AddBookReply.ValidateAll() if the designated constraints aren't met.
type AddBookReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBookReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBookReplyMultiError) AllErrors() []error { return m }

// AddBookReplyValidationError is the validation error returned by
// AddBookReply.Validate if the designated constraints aren't met.
type AddBookReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBookReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBookReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBookReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBookReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBookReplyValidationError) ErrorName() string { return "AddBookReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddBookReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBookReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBookReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBookReplyValidationError{}

// Validate checks the field values on ShopListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShopListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShopListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShopListRequestMultiError, or nil if none found.
func (m *ShopListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShopListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Size

	if len(errors) > 0 {
		return ShopListRequestMultiError(errors)
	}

	return nil
}

// ShopListRequestMultiError is an error wrapping multiple validation errors
// returned by ShopListRequest.ValidateAll() if the designated constraints
// aren't met.
type ShopListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopListRequestMultiError) AllErrors() []error { return m }

// ShopListRequestValidationError is the validation error returned by
// ShopListRequest.Validate if the designated constraints aren't met.
type ShopListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopListRequestValidationError) ErrorName() string { return "ShopListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShopListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopListRequestValidationError{}

// Validate checks the field values on Shop with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Shop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shop with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShopMultiError, or nil if none found.
func (m *Shop) ValidateAll() error {
	return m.validate(true)
}

func (m *Shop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Address

	if len(errors) > 0 {
		return ShopMultiError(errors)
	}

	return nil
}

// ShopMultiError is an error wrapping multiple validation errors returned by
// Shop.ValidateAll() if the designated constraints aren't met.
type ShopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopMultiError) AllErrors() []error { return m }

// ShopValidationError is the validation error returned by Shop.Validate if the
// designated constraints aren't met.
type ShopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopValidationError) ErrorName() string { return "ShopValidationError" }

// Error satisfies the builtin error interface
func (e ShopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopValidationError{}

// Validate checks the field values on ShopListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShopListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShopListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShopListReplyMultiError, or
// nil if none found.
func (m *ShopListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShopListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShops() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShopListReplyValidationError{
						field:  fmt.Sprintf("Shops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShopListReplyValidationError{
						field:  fmt.Sprintf("Shops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShopListReplyValidationError{
					field:  fmt.Sprintf("Shops[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShopListReplyMultiError(errors)
	}

	return nil
}

// ShopListReplyMultiError is an error wrapping multiple validation errors
// returned by ShopListReply.ValidateAll() if the designated constraints
// aren't met.
type ShopListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopListReplyMultiError) AllErrors() []error { return m }

// ShopListReplyValidationError is the validation error returned by
// ShopListReply.Validate if the designated constraints aren't met.
type ShopListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopListReplyValidationError) ErrorName() string { return "ShopListReplyValidationError" }

// Error satisfies the builtin error interface
func (e ShopListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShopListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopListReplyValidationError{}
